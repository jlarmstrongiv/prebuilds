name: nodejs__aws-lambda-ric
on:
  push:
    branches:
      - "*"
  schedule:
    # rebuild every day at 1am UTC for security and updates
    - cron: "0 1 * * *"

jobs:
  setup:
    concurrency:
      cancel-in-progress: true
      group: ${{ github.ref }}__${{ github.workflow }}__${{ github.job }}
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: ubuntu-latest
    steps:
      - id: create-tag
        name: create tag
        timeout-minutes: 5
        uses: ./.github/composite/create-tag

      - name: create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 5
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          release_name: ${{ steps.create_tag.outputs.tag }}
          draft: true
          prerelease: false
    timeout-minutes: 15

  build-and-upload:
    concurrency:
      cancel-in-progress: true
      group: ${{ github.ref }}__${{ github.workflow }}__${{ github.job }}
    needs:
      - setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        image:
          - public.ecr.aws/amazonlinux/amazonlinux:2
          - public.ecr.aws/amazonlinux/amazonlinux:2022
          - public.ecr.aws/lts/ubuntu:jammy
        nodejs:
          - 14
          - 16
          - 18
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v3

      - name: setup docker
        timeout-minutes: 15
        uses: ./.github/composite/setup-docker

      - id: get-os
        name: get os
        timeout-minutes: 5
        uses: ./.github/composite/get-os

      - id: get-architecture
        name: get architecture
        timeout-minutes: 5
        uses: ./.github/composite/get-architecture

      - id: get-filenames
        name: get filenames
        timeout-minutes: 5
        env:
          OS: ${{ steps.get-os.outputs.os }}
          ARCHITECTURE: ${{ steps.get-architecture.outputs.architecture }}
          NODEJS_MAJOR_VERSION: ${{ matrix.nodejs }}
        run: |
          ric_filename="${OS:-}__${ARCHITECTURE:-}__nodejs-${NODEJS_MAJOR_VERSION:-}__aws-lambda-ric.tar.gz"
          vercel_ncc_ric_filename="${OS:-}__${ARCHITECTURE:-}__nodejs-${NODEJS_MAJOR_VERSION:-}__vercel-ncc-aws-lambda-ric.tar.gz"
          echo "::set-output name=ric_filename::$ric_filename"
          echo "::set-output name=vercel_ncc_ric_filename::$vercel_ncc_ric_filename"

      - name: compile
        shell: bash
        env:
          OS: ${{ steps.get-os.outputs.os }}
          NODEJS_MAJOR_VERSION: ${{ matrix.nodejs }}
          RIC_FILENAME: ${{ steps.get-filenames.outputs.ric_filename }}
          VERCEL_NCC_RIC_FILENAME: ${{ steps.get-filenames.outputs.vercel_ncc_ric_filename }}
        run: |
          docker run --platform "$PLATFORM" --entrypoint "/bin/bash" -v "$PWD:/var/task" --rm "$IMAGE" -c "/var/task/bin/$OS/workflows/${{ github.workflow }}"

      - name: Upload ric
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 15
        with:
          upload_url: ${{ needs.setup.outputs.upload_url }}
          asset_path: ${{ steps.get-filenames.outputs.ric_filename }}
          asset_name: ${{ steps.get-filenames.outputs.ric_filename }}
          asset_content_type: application/gzip

      - name: Upload vercel_ncc_ric
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 15
        with:
          upload_url: ${{ needs.setup.outputs.upload_url }}
          asset_path: ${{ steps.get-filenames.outputs.vercel_ncc_ric_filename }}
          asset_name: ${{ steps.get-filenames.outputs.vercel_ncc_ric_filename }}
          asset_content_type: application/gzip

    # max timeout of 6 hours (60 minutes * 6)
    timeout-minutes: 360

  publish-release:
    needs:
      - setup
      - build-and-upload
    runs-on: ubuntu-latest
    steps:
      - uses: eregon/publish-release@v1
        timeout-minutes: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.setup.outputs.release_id }}
      - uses: eregon/keep-last-n-releases@v1
        timeout-minutes: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 60
          remove_tags_without_release: true
